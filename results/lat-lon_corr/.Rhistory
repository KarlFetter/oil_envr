# This one is sorted by the regression estimate value
fr0 <- mod3 %>%
gather_draws(
b_bio1,
b_bio2,
b_bio3,
b_bio4,
b_bio5,
b_bio6,
b_bio7,
b_bio8,
b_bio9,
b_bio10,
b_bio11,
b_bio12,
b_bio13,
b_bio14,
b_bio15,
b_bio16,
b_bio17,
b_bio18,
b_bio19,
b_lat,
b_lon,
sd_pop_code__Intercept) %>%
median_qi(.width = c(.95, .66)) %>%
#arrange(.value) %>%
ggplot(aes(y=reorder(.variable, .value), x=.value, xmin = .lower, xmax = .upper)) +
theme_classic() +
geom_vline(xintercept=0, color = 'grey80', linetype = "dashed") +
geom_pointinterval() +
labs(x="Estimate", title = "% Saturated Fatty Acids") +
theme(axis.title.y = element_blank(),
axis.text.y = element_text(colour = "black"))
median_qi
?median_qi
library(tidybayes)
?median_qi
# Make a plot of the variables you want
# This one is sorted by the regression estimate value
fr0 <- mod3 %>%
gather_draws(
b_bio1,
b_bio2,
b_bio3,
b_bio4,
b_bio5,
b_bio6,
b_bio7,
b_bio8,
b_bio9,
b_bio10,
b_bio11,
b_bio12,
b_bio13,
b_bio14,
b_bio15,
b_bio16,
b_bio17,
b_bio18,
b_bio19,
b_lat,
b_lon,
sd_pop_code__Intercept) %>%
median_qi(.width = c(.95, .66)) %>%
#arrange(.value) %>%
ggplot(aes(y=reorder(.variable, .value), x=.value, xmin = .lower, xmax = .upper)) +
theme_classic() +
geom_vline(xintercept=0, color = 'grey80', linetype = "dashed") +
geom_pointinterval() +
labs(x="Estimate", title = "% Saturated Fatty Acids") +
theme(axis.title.y = element_blank(),
axis.text.y = element_text(colour = "black"))
fr0
dat %>% head
S
# Genomic relatedness matrix
G <- read.table("~/Dropbox/oil_envr/results/kinship/genomic_relatedness_matrix.N140.loci247.txt",T,'\t')
G
# Trait and spatial data
dat <- read.table("~/Dropbox/oil_envr/results/data2go/trait_SNP_overlap_set_N140.txt")
# Remove character factors from the data
df <- dat[,-c(1:7,29:32)]
# Calculate the correlation matrix
corr<- cor(df)
# Plot it
#pdf("corr_mat_6x6_v0.pdf", width = 6, height = 6)
ggcorrplot::ggcorrplot(corr, type="upper", hc.order = FALSE,
lab = TRUE, lab_size = 2)
# Calculate the correlation matrix
corr<- cor(df)
head(df)
# Trait and spatial data
dat <- read.table("~/Dropbox/oil_envr/results/data2go/trait_SNP_overlap_set_N140.txt",t,'\t')
# Genomic relatedness matrix
G <- read.table("~/Dropbox/oil_envr/results/kinship/genomic_relatedness_matrix.N140.loci247.txt",T,'\t')
# Remove character factors from the data
df <- dat[,-c(1:7,29:32)]
# Calculate the correlation matrix
corr<- cor(df)
head(df)
# Trait and spatial data
dat <- read.table("~/Dropbox/oil_envr/results/data2go/trait_SNP_overlap_set_N140.txt",T,'\t')
# Remove character factors from the data
df <- dat[,-c(1:7,29:32)]
# Calculate the correlation matrix
corr<- cor(df)
# Plot it
#pdf("corr_mat_6x6_v0.pdf", width = 6, height = 6)
ggcorrplot::ggcorrplot(corr, type="upper", hc.order = FALSE,
lab = TRUE, lab_size = 2)
#dev.off()
?corr
?cor
# Pearson's correlations
dat %>%
select(unsat, lat, lon) %>%
cor()
install.packages("geoR")
install.packages("geoR", contriburl="http://leg.ufpr.br/~paulojus/geoR")
.libPaths()
library(geoR)
dat %>%
select(pop_code, unsat, lat, lon) %>%
head()
dat %>%
select(pop_code, unsat, lat, lon) %>%
head()
names(dat)
dat %>%
select(pop_code, unsat, lat, lon) %>%
head()
select(dat, pop_code, unsat, lat, lon) %>%
head()
dat %>% select(unsat)
library(tidyverse)
dat %>% select(unsat)
?select
dat %>%
dplyr::select(pop_code, unsat, lat, lon) %>%
head()
ozone<-read.table("https://stats.idre.ucla.edu/stat/r/faq/ozone.csv", sep=",", header=T)
class(ozone)
typeof(ozone)
str(ozone)
names(dat)
# Convert data to geodata
geodata <- as.geodata(dat, coords.col = 8:9, data.col = 7, data.names = "unsat")
# Convert data to geodata
geodata <- as.geodata(dat, coords.col = 8:9, data.col = 7)
?jitterDupCoords()
# Add a bit of jitter
coords <- jitterDupCoords(coords = data.frame(dat$lat, dat$lon))
data.frame(dat$lat, dat$lon)
# Add a bit of jitter
coords <- jitterDupCoords(coords = data.frame(dat$lat, dat$lon))
# Add a bit of jitter
coords <- jitterDupCoords(x = data.frame(dat$lat, dat$lon))
# Add a bit of jitter
coords <- jitterDupCoords(x = data.frame(dat$lat, dat$lon), max=0.00001)
coords
# Add a bit of jitter
coords <- jitterDupCoords(x = data.frame(dat$lat, dat$lon), max=0.0001)
head(coords)
dim(coords)
# Create an object with the pop_codes, coords, and data
tmp <- dat %>%
dplyr::select(pop_code, unsat) %>%
mutate(lat = coords$dat.lat, lon = coords$dat.lon)
head(tmp)
# Convert data to geodata
geodata <- as.geodata(tmp, coords.col = 3:4, data.col = 1)
geodata
# Convert data to geodata
geodata <- as.geodata(tmp, coords.col = 3:4, data.col = 2)
str(geodata)
geodata
variog.out <- variog(geodata = geodata)
variog.out
plot(variog.out)
variog1 <- variog(geodata = geodata)
# calculate the second order variogram
variog2 <- variog(geodata = geodata, trend = "2nd")
library(cowplot)
# plot both objects
pv1 <- as_grob(plot(variog1))
plot(variot1)
plot(variog1)
plot(variog2)
plot.new()
par(mfrow = c(2,1))
plot(variog1, col="black", main = "1st order variogram")
plot(variog2, col="blue", main = "2nd order variogram")
summary(geodata)
?krige.bayes
mod0 <- krige.bayes(geodata = geodata,
loc = pop_code,
prior = prior.control(phi.discrete = seq(0,5,l=101), phi.prior="rec"),
output=output.control(n.post=5000))
names(geodata)
mod0 <- krige.bayes(geodata = geodata,
prior = prior.control(phi.discrete = seq(0,5,l=101), phi.prior="rec"),
output=output.control(n.post=5000))
hist(mod0$posterior$sample$beta)
seq(0,5,l=101)
seq(0,5,l=100)
mod0 <- krige.bayes(geodata = geodata,
prior = prior.control(phi.discrete = seq(0,5,l=100), phi.prior="rec"),
output=output.control(n.post=5000))
mod0$posterior %>% str()
mod0$posterior %>% dim()
mod0$posterior %>% length()
# Extract the posterior estimates
posterior <- data.frame(
beta = mod0$posterior$beta,
siqma = mod0$posterior$sigmasq,
tau = mod0$posterior$tausq.rel,
phi = mod0$posterior$phi
)
posterior
?data.frame
length(mod0$posterior$beta)
dim(mod0$posterior$beta)
mod0$posterior$beta
mod0$posterior$beta
mod0$posterior$beta %>% str()
mod0$posterior$beta
mod0$posterior$beta
mod0$posterior$beta$conditional.distribution
mod0$posterior$beta$pars$mean
mod0$posterior$beta$pars$mean[1]
mod0$posterior$beta$pars$mean[,1]
mod0$posterior$beta$pars$mean[,1]
mod0$posterior$beta$pars$mean[[1]]
mod0$posterior$beta$pars$mean
mod0$posterior$beta$pars$mean %>% str()
mod0$posterior$beta$pars$mean[1:100]
mod0$posterior$sigmasq$pars$S2[1:100]
mod0$posterior$sigmasq$pars$df
mod0$posterior$beta$pars$mean[1:100]
mod0$posterior$sigmasq$pars$
mod0$posterior$sigmasq$pars
mod0$posterior$tausq.rel
mod0$posterior$phi$distribution
# Extract the posterior estimates
posterior <- data.frame(
beta = mod0$posterior$beta$pars$mean[1:100],
siqma = mod0$posterior$sigmasq$pars$S2,
phi = mod0$posterior$phi$distribution
)
dim(posterior)
head(posterior)
# View the parameter estimates
p_beta <- ggplot(posterior, aes(beta)) +
geom_histogram(color="black", fill="grey", lwd=0.3) +
theme_minimal()
p_beta
hist(mod0$posterior$beta)
hist(mod0$posterior$sample)
hist(mod0$posterior$sample$beta)
dev.off()
mod0$posterior$sample
head(mod0$posterior$sample)
# Extract the posterior estimates
posterior <- mod0$posterior$sample
head(posterior)
# View the parameter estimates
p_beta <- ggplot(posterior, aes(beta)) +
geom_histogram(color="black", fill="grey", lwd=0.3) +
theme_minimal()
p_beta
# View the parameter estimates
p_beta <- ggplot(posterior, aes(beta)) +
geom_histogram(color="black", fill="grey", lwd=0.3) +
theme_minimal() +
xlab(expression(paste(beta)))
p_beta
p_beta <- ggplot(posterior, aes(beta)) +
geom_histogram(color="black", fill="grey", lwd=0.3) +
theme_minimal() +
xlab(expression(paste(beta)))
p_sigma <- ggplot(posterior, aes(sigmasq)) +
geom_histogram(color="black", fill="grey", lwd=0.3) +
theme_minimal() +
xlab(expression(paste(sigma^2)))
p_beta <- ggplot(posterior, aes(phi)) +
geom_histogram(color="black", fill="grey", lwd=0.3) +
theme_minimal() +
xlab(expression(paste(phi)))
plot_grid(p_beta, p_sigma, p_phi, ncol = 3)
# View the parameter estimates
p_beta <- ggplot(posterior, aes(beta)) +
geom_histogram(color="black", fill="grey", lwd=0.3) +
theme_minimal() +
xlab(expression(paste(beta)))
p_sigma <- ggplot(posterior, aes(sigmasq)) +
geom_histogram(color="black", fill="grey", lwd=0.3) +
theme_minimal() +
xlab(expression(paste(sigma^2)))
p_phi <- ggplot(posterior, aes(phi)) +
geom_histogram(color="black", fill="grey", lwd=0.3) +
theme_minimal() +
xlab(expression(paste(phi)))
plot_grid(p_beta, p_sigma, p_phi, ncol = 3)
posterior$phi
# Look at their summary
summary(posterior)
?prior.control
mod0 <- krige.bayes(geodata = geodata,
prior = prior.control(
phi.prior="exponential"
),
output=output.control(n.post=10000))
mod0 <- krige.bayes(geodata = geodata,
prior = prior.control(
phi.prior="exponential",
phi = 5
),
output=output.control(n.post=10000))
# Extract the posterior estimates
posterior <- mod0$posterior$sample
# Look at their summary
summary(posterior)
# View the parameter estimates
p_beta <- ggplot(posterior, aes(beta)) +
geom_histogram(color="black", fill="grey", lwd=0.3) +
theme_minimal() +
xlab(expression(paste(beta)))
p_sigma <- ggplot(posterior, aes(sigmasq)) +
geom_histogram(color="black", fill="grey", lwd=0.3) +
theme_minimal() +
xlab(expression(paste(sigma^2)))
p_phi <- ggplot(posterior, aes(phi)) +
geom_histogram(color="black", fill="grey", lwd=0.3) +
theme_minimal() +
xlab(expression(paste(phi)))
plot_grid(p_beta, p_sigma, p_phi, ncol = 3)
# Look at their summary
summary(posterior)
plot(variog1)
plot(variog1)
lines(mod0, max.dist = 1.2, summ = mean)
lines(mod0, max.dist = 1.2, summ = median, lty = 2)
lines(mod0, max.dist = 1.2, summ = "mode", post="par",lwd = 2, lty = 2)
legend(0.25, 0.4, legend = c("variogram posterior mean", "variogram posterior median", "parameters posterior mode"), lty = c(1,2,2), lwd = c(1,1,2), cex = 0.8)
plot(variog1)
lines(mod0, max.dist = 1.2, summ = mean)
lines(mod0, max.dist = 1.2, summ = median, lty = 2)
lines(mod0, max.dist = 1.2, summ = "mode", post="par",lwd = 2, lty = 2)
legend(0.25, 0.4, legend = c("variogram posterior mean", "variogram posterior median", "parameters posterior mode"), lty = c(1,2,2), lwd = c(1,1,2), cex = 0.8)
plot(variog1)
lines(mod0,  summ = mean)
lines(mod0)
plot_grid(p_beta, p_sigma, p_phi, ncol = 1)
plot(variog1)
lines.variomodel(cov.model = "exp", cov.pars = c(1,0.3), nugget = 0, max.dist = 1,  lwd = 3)
lines.variomodel(cov.model = "exp", cov.pars = c(1,0.3), nugget = 0, max.dist = 20,  lwd = 3)
lines.variomodel(cov.model = "exp", cov.pars = c(1,1), nugget = 0, max.dist = 20,  lwd = 3)
lines.variomodel(cov.model = "exp", cov.pars = c(1,1), nugget = 1, max.dist = 20,  lwd = 3)
lines.variomodel(cov.model = "exp", cov.pars = c(1,10), nugget = 0, max.dist = 20,  lwd = 3)
lines.variomodel(cov.model = "exp", cov.pars = c(10,1), nugget = 0, max.dist = 20,  lwd = 3)
lines.variomodel(cov.model = "exp", cov.pars = c(5,5), nugget = 0, max.dist = 20,  lwd = 3)
lines.variomodel(cov.model = "exp", cov.pars = c(5,-5), nugget = 0, max.dist = 20,  lwd = 3)
lines.variomodel(cov.model = "exp", cov.pars = c(5,4), nugget = 0, max.dist = 20,  lwd = 3)
lines.variomodel(cov.model = "exp", cov.pars = c(4,4), nugget = 0, max.dist = 20,  lwd = 3)
plot(variog1)
lines.variomodel(cov.model = "exp", cov.pars = c(4,4), nugget = 0, max.dist = 20,  lwd = 3)
lines.variomodel(cov.model = "exp", cov.pars = c(1,1), nugget = 0, max.dist = 20,  lwd = 3)
lines.variomodel(cov.model = "exp", cov.pars = c(-1,1), nugget = 0, max.dist = 20,  lwd = 3)
lines.variomodel(cov.model = "exp", cov.pars = c(1,-1), nugget = 0, max.dist = 20,  lwd = 3)
lines.variomodel(cov.model = "exp", cov.pars = c(1,-1), nugget = 0, max.dist = 20,  lwd = 3)
dev.off()
?lines.variomodel
plot_grid(p_beta, p_sigma, p_phi, ncol = 1)
summary(posterior)
plot(variog1)
lines.variomodel(cov.model = "exp", cov.pars = c(22986, 0.7991), nugget = 0, max.dist = 20,  lwd = 3)
lines.variomodel(cov.model = "exp", cov.pars = c(1, 7), nugget = 1, max.dist = 20,  lwd = 3)
lines.variomodel(cov.model = "exp", cov.pars = c(0, 7), nugget = 1, max.dist = 20,  lwd = 3)
lines.variomodel(cov.model = "exp", cov.pars = c(7, 7), nugget = 1, max.dist = 20,  lwd = 3)
lines.variomodel(cov.model = "exp", cov.pars = c(5, 7), nugget = 1, max.dist = 20,  lwd = 3)
lines.variomodel(cov.model = "exp", cov.pars = c(5, 7), nugget = 1, max.dist = 20,  lwd = 3)
dev.off()
ml <- likfit(geodata = geodata)
?likfit
variog0
variog1
plot(variog1)
ml <- likfit(geodata = geodata, ini.cov.pars = c(1, 1))
summary(m)
summary(ml)
summary(ml)
lines.variomodel(cov.model = "exp", cov.pars = c(1.8, 16), nugget = 1, max.dist = 20,  lwd = 3)
range(dat$lat)
range(dat$lon)
dat.gr <- expand.grid((25:55)/100, (-125:-95)/100)
dat.gr
dat.kc <- krige.conv(dat, locations = dat.gr, krige = krige.control(obj.model = ml))
s100
dat.kc <- krige.conv(geodat, locations = dat.gr, krige = krige.control(obj.model = ml))
dat.kc <- krige.conv(geodata, locations = dat.gr, krige = krige.control(obj.model = ml))
names(dat.kc)
image(dat.kc,col = gray(seq(1, 0.2, l = 21)))
contour(dat.kc, nlevels = 11, add = TRUE)
mod1 <- krige.bayes(geodata = geodata,
prior = prior.control(
phi.prior="rec"),
output=output.control(n.post=10000))
summary(mod1)
posterior1 <- mod1$posterior$sample
# Look at their summary
summary(posterior1)
p_beta <- ggplot(posterior1, aes(beta)) +
geom_histogram(color="black", fill="grey", lwd=0.3) +
theme_minimal() +
xlab(expression(paste(beta)))
p_sigma <- ggplot(posterior1, aes(sigmasq)) +
geom_histogram(color="black", fill="grey", lwd=0.3) +
theme_minimal() +
xlab(expression(paste(sigma^2)))
p_phi <- ggplot(posterior1, aes(phi)) +
geom_histogram(color="black", fill="grey", lwd=0.3) +
theme_minimal() +
xlab(expression(paste(phi)))
plot_grid(p_beta, p_sigma, p_phi, ncol = 1)
plot(variog1)
lines(mod1,  summ = mean)
lines(mod1,  summ = median)
lines(mod1, max.dist = 1.2, summ = median, lty = 2)
lines(mod1, max.dist = 1.2, summ = "mode", post="par",lwd = 2, lty = 2)
plot(variog1)
plot(variog(geodata, max.dist = 1))
plot(variog(geodata, max.dist = 10))
plot(variog(geodata, max.dist = 15))
plot(variog(geodata))
lines.variomodel(cov.model="exp", cov.pars=c(1,.3), nug=1)
plot(variog(geodata, max.dist = 1))
lines.variomodel(cov.model="exp", cov.pars=c(1,.3), nug=0, max.dist = 1)
lines.variomodel(cov.model="exp", cov.pars=c(1,1), nug=0, max.dist = 1)
lines.variomodel(cov.model="exp", cov.pars=c(1,0.5), nug=0, max.dist = 1)
plot(variog(geodata, max.dist = 1))
lines.variomodel(cov.model="exp", cov.pars=c(1,0.5), nug=0, max.dist = 1)
lines.variomodel(cov.model="exp", cov.pars=c(2,0.5), nug=0, max.dist = 1)
lines.variomodel(cov.model="exp", cov.pars=c(1,0.5), nug=1, max.dist = 1)
plot(variog(geodata))
summary(variog1)
ml.n <- likfit(geodata, ini.cov.pars = c(1,15), nugget = 0.5)
plot(variog1)
lines(ml.n)
summary(ml.n)
ml.n <- likfit(geodata, ini.cov.pars = c(1,15), nugget = 0.5)
reml.n <- likfit(geodata, ini = c(1,15), nug = 0.5, method = "RML")
ols.n <- variofit(bin1, ini = c(1,15), nugget=0.5, weights="equal")
wls.n <- variofit(bin1, ini = c(1,15), nugget=0.5)
ols.n <- variofit(variog1, ini = c(1,15), nugget=0.5, weights="equal")
wls.n <- variofit(variog1, ini = c(1,15), nugget=0.5)
ols.n <- variofit(variog1, ini = c(2,15), nugget=0.5, weights="equal")
wls.n <- variofit(variog1, ini = c(2,15), nugget=0.5)
plot(variog1)
lines(ml.n)
lines(reml.n, lty=2)
lines(ols.n, lty=3)
lines(wls.n, lty=4)
plot(variog1)
lines(ml.n)
lines(reml.n, lty=2)
lines(ols.n, lty=3)
lines(wls.n, lty=4)
legend(0.5, 0.3, legend=c("ML","REML","OLS","WLS"), lty=c(1,2,4,5), lwd=c(1,2,1,2), cex=0.7)
legend(0.5, 6, legend=c("ML","REML","OLS","WLS"), lty=c(1,2,4,5), lwd=c(1,2,1,2), cex=0.7)
plot(variog1)
lines(ml.n)
lines(reml.n, lty=2)
lines(ols.n, lty=3)
lines(wls.n, lty=4)
legend(0.5, 6, legend=c("ML","REML","OLS","WLS"), lty=c(1,2,4,5), lwd=c(1,2,1,2), cex=0.7)
reml.n
summary(reml.n)
legend(0.5, 6, legend=c("ML","REML","OLS","WLS"), lty=c(1,2,4,5), lwd=rep(1,4), cex=0.7)
plot(variog1)
lines(ml.n)
lines(reml.n, lty=2)
lines(ols.n, lty=3)
lines(wls.n, lty=4)
legend(0.5, 6, legend=c("ML","REML","OLS","WLS"), lty=c(1,2,4,5), lwd=rep(1,4), cex=0.7)
# Plot the results of the models
plot(variog1,
main="Observed \& Estimated variogram.")
# Plot the results of the models
plot(variog1,
main="Observed & Estimated variogram.")
lines(ml.n)
lines(reml.n, lty=2)
lines(ols.n, lty=3)
lines(wls.n, lty=4)
legend(0.5, 6, legend=c("ML","REML","OLS","WLS"), lty=c(1,2,4,5), lwd=rep(1,4), cex=0.7)
pdf("obs_est_variogram_ML_method.pdf", width=4, height=5)
plot(variog1,
main="Observed & Estimated variogram.")
lines(ml.n)
lines(reml.n, lty=2)
lines(ols.n, lty=3)
lines(wls.n, lty=4)
legend(0.5, 6, legend=c("ML","REML","OLS","WLS"), lty=c(1,2,4,5), lwd=rep(1,4), cex=0.7)
dev.off()
reml.n
mod1
summary(mod1)
mod1
plot_grid(p_beta, p_sigma, p_phi, ncol = 1)
summary(posterior)
ls()
