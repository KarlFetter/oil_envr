library(tidyverse)
cond_mat.zr1      <- conditional_effects(fit.zr1)$admixed               %>%  mutate(X="zDisR1")
cond_mat.zr2      <- conditional_effects(fit.zr2)$admixed               %>%  mutate(X="zDisR2")
library(brms)
cond_mat.zr1      <- conditional_effects(fit.zr1)$admixed               %>%  mutate(X="zDisR1")
cond_mat.zr2      <- conditional_effects(fit.zr2)$admixed               %>%  mutate(X="zDisR2")
names(cond_mat.zr1)[2]      <- "X_mean"
names(cond_mat.zr2)[2]      <- "X_mean"
load("~/Dropbox/hybrid_trait/results/rescaled_effects/admix/models/fit.zr1.brms")
load("~/Dropbox/hybrid_trait/results/rescaled_effects/admix/models/fit.zr2.brms")
load("~/Dropbox/hybrid_trait/results/rescaled_effects/admix/models/fit.zr3.brms")
load("~/Dropbox/hybrid_trait/results/rescaled_effects/admix/models/fit.percC_student.brms") #best
load("~/Dropbox/hybrid_trait/results/rescaled_effects/admix/models/fit.percN_student.brms") #best
load("~/Dropbox/hybrid_trait/results/rescaled_effects/admix/models/fit.SLA_gaussian.brms") #best
load("~/Dropbox/hybrid_trait/results/rescaled_effects/admix/models/fit.D13C_student.brms") #best
load("~/Dropbox/hybrid_trait/results/rescaled_effects/admix/models/fit.d15N_gaussian.brms") #best
load("~/Dropbox/hybrid_trait/results/rescaled_effects/admix/models/fit.CN_student.brms") # best
load("~/Dropbox/hybrid_trait/results/rescaled_effects/admix/models/fit.CCI_gaussian.brms")#best
load("~/Dropbox/hybrid_trait/results/rescaled_effects/admix/models/fit.G_gaussian.brms") # best
load("~/Dropbox/hybrid_trait/results/rescaled_effects/admix/models/fit.zD_l_student.brms") #best
load("~/Dropbox/hybrid_trait/results/rescaled_effects/admix/models/fit.zD_u_skew-loo.brms") # best
load("~/Dropbox/hybrid_trait/results/rescaled_effects/admix/models/fit.zS_u_skew.brms") #best
load("~/Dropbox/hybrid_trait/results/rescaled_effects/admix/models/fit.zS_l_student.brms") # best
load("~/Dropbox/hybrid_trait/results/rescaled_effects/admix/models/fit.zfs_u_skew.brms")#best
load("~/Dropbox/hybrid_trait/results/rescaled_effects/admix/models/fit.zfs_l_student.brms") #best
load("~/Dropbox/hybrid_trait/results/rescaled_effects/admix/models/fit.zfs_student.brms") # best
load("~/Dropbox/hybrid_trait/results/rescaled_effects/admix/models/fit.zgsmax_u_skew-loo.brms")
load("~/Dropbox/hybrid_trait/results/rescaled_effects/admix/models/fit.zgsmax_l_student.brms") # best
load("~/Dropbox/hybrid_trait/results/rescaled_effects/admix/models/fit.zgsmax_student.brms") #best
load("~/Dropbox/hybrid_trait/results/rescaled_effects/admix/models/fit.zU_u_skew.brms")
load("~/Dropbox/hybrid_trait/results/rescaled_effects/admix/models/fit.zU_l_student.brms") #best
load("~/Dropbox/hybrid_trait/results/rescaled_effects/admix/models/fit.zAR_skew.brms") #best
load("~/Dropbox/hybrid_trait/results/rescaled_effects/admix/models/fit.zSR_skew.brms") #best
load("~/Dropbox/hybrid_trait/results/rescaled_effects/admix/models/fit.zfsR_skew.brms") #Best
cond_mat.zr1      <- conditional_effects(fit.zr1)$admixed               %>%  mutate(X="zDisR1")
cond_mat.zr2      <- conditional_effects(fit.zr2)$admixed               %>%  mutate(X="zDisR2")
cond_mat.zr3      <- conditional_effects(fit.zr3)$admixed               %>%  mutate(X="zDisR3")
cond_mat.zCCI     <- conditional_effects(fit.CCI_gaussian)$admixed      %>%  mutate(X="zCCI")
cond_mat.zpercC   <- conditional_effects(fit.percC_student)$admixed     %>%  mutate(X="zpercC")
cond_mat.zpercN   <- conditional_effects(fit.percN_student)$admixed     %>%  mutate(X="zpercN")
cond_mat.zCN      <- conditional_effects(fit.CN_student)$admixed        %>%  mutate(X="zCN")
cond_mat.zD13C    <- conditional_effects(fit.D13C_student)$admixed      %>%  mutate(X="zD13C")
cond_mat.zd15N    <- conditional_effects(fit.d15N_gaussian)$admixed     %>%  mutate(X="zd15N")
cond_mat.zG       <- conditional_effects(fit.G_gaussian)$admixed        %>%  mutate(X="zG")
cond_mat.zSLA     <- conditional_effects(fit.SLA_gaussian)$admixed      %>%  mutate(X="zSLA")
cond_mat.zD_l     <- conditional_effects(fit.zD_l_student)$admixed      %>%  mutate(X="zD_l")
cond_mat.zD_u     <- conditional_effects(fit.zD_u_skew)$admixed         %>%  mutate(X="zD_u")
cond_mat.zfs_l    <- conditional_effects(fit.zfs_l_student)$admixed     %>%  mutate(X="zfs_l")
cond_mat.zfs      <- conditional_effects(fit.zfs_student)$admixed       %>%  mutate(X="zfs")
cond_mat.zfs_u    <- conditional_effects(fit.zfs_u_skew)$admixed        %>%  mutate(X="zfs_u")
cond_mat.zgsmax_u <- conditional_effects(fit.zgsmax_u_skew)$admixed     %>%  mutate(X="zgsmax_u")
cond_mat.zgsmax_l <- conditional_effects(fit.zgsmax_l_student)$admixed  %>%  mutate(X="zgsmax_l")
cond_mat.zgsmax   <- conditional_effects(fit.zgsmax_student)$admixed    %>%  mutate(X="zgsmax")
cond_mat.zS_l     <- conditional_effects(fit.zS_l_student)$admixed      %>%  mutate(X="zS_l")
cond_mat.zS_u     <- conditional_effects(fit.zS_u_skew)$admixed         %>%  mutate(X="zS_u")
cond_mat.zU_u     <- conditional_effects(fit.zU_u_skew)$admixed         %>%  mutate(X="zU_u")
cond_mat.zU_l     <- conditional_effects(fit.zU_l_student)$admixed      %>%  mutate(X="zU_l")
cond_mat.zSR      <- conditional_effects(fit.zSR_skew)$admixed          %>%  mutate(X="zSR")
cond_mat.zAR      <- conditional_effects(fit.zAR_skew)$admixed          %>%  mutate(X="zAR")
cond_mat.zfsR     <- conditional_effects(fit.zfsR_skew)$admixed         %>%  mutate(X="zfsR")
# Change all the different names of the trait estimates to X_mean
names(cond_mat.zr1)[2]      <- "X_mean"
names(cond_mat.zr2)[2]      <- "X_mean"
names(cond_mat.zr3)[2]      <- "X_mean"
names(cond_mat.zCCI)[2]     <- "X_mean"
names(cond_mat.zCN)[2]      <- "X_mean"
names(cond_mat.zD13C)[2]    <- "X_mean"
names(cond_mat.zd15N)[2]    <- "X_mean"
names(cond_mat.zG)[2]       <- "X_mean"
names(cond_mat.zpercC)[2]   <- "X_mean"
names(cond_mat.zpercN)[2]   <- "X_mean"
names(cond_mat.zSLA)[2]     <- "X_mean"
names(cond_mat.zD_l)[2]     <- "X_mean"
names(cond_mat.zD_u)[2]     <- "X_mean"
names(cond_mat.zfs_l)[2]    <- "X_mean"
names(cond_mat.zfs)[2]      <- "X_mean"
names(cond_mat.zfs_u)[2]    <- "X_mean"
names(cond_mat.zgsmax_u)[2] <- "X_mean"
names(cond_mat.zgsmax_l)[2] <- "X_mean"
names(cond_mat.zgsmax)[2]   <- "X_mean"
names(cond_mat.zS_l)[2]     <- "X_mean"
names(cond_mat.zS_u)[2]     <- "X_mean"
names(cond_mat.zU_u)[2]     <- "X_mean"
names(cond_mat.zU_l)[2]     <- "X_mean"
names(cond_mat.zSR)[2]      <- "X_mean"
names(cond_mat.zAR)[2]      <- "X_mean"
names(cond_mat.zfsR)[2]     <- "X_mean"
# Row bind the data.
# This object is a dataframe of the conditional effect estimates
# for admixed and unadmixed for each trait.
cond_df <- as_tibble(
rbind(
cond_mat.zr1,
cond_mat.zr2,
cond_mat.zr3,
cond_mat.zCCI    ,
cond_mat.zCN     ,
cond_mat.zD13C   ,
cond_mat.zd15N   ,
cond_mat.zG      ,
cond_mat.zpercC  ,
cond_mat.zpercN  ,
cond_mat.zSLA    ,
cond_mat.zD_l    ,
cond_mat.zD_u    ,
cond_mat.zfs_l   ,
cond_mat.zfs     ,
cond_mat.zfs_u   ,
cond_mat.zgsmax_u,
cond_mat.zgsmax_l,
cond_mat.zgsmax  ,
cond_mat.zS_l    ,
cond_mat.zS_u    ,
cond_mat.zU_u    ,
cond_mat.zU_l    ,
cond_mat.zSR     ,
cond_mat.zAR     ,
cond_mat.zfsR    )
)
# Clean up the names
names(cond_df) <- c("admixed","X_mean","row","col","ind_code",
"cond","effect","estimate","se","lower","upper","X")
# Add a factor for the type of trait, either disease, stomata, or ecophysiology
cond_df$X_group <- c("resistance","resistance","resistance","resistance","resistance","resistance","ecophys","ecophys","ecophys","ecophys","ecophys","ecophys","ecophys","ecophys","ecophys","ecophys","ecophys","ecophys","ecophys","ecophys","ecophys","ecophys","stomata","stomata","stomata","stomata","stomata","stomata","stomata","stomata","stomata","stomata","stomata","stomata","stomata","stomata","stomata","stomata","stomata","stomata","stomata","stomata","stomata","stomata","stomata","stomata","stomata","stomata","stomata","stomata","stomata","stomata")
# Make some plots
p0 <- ggplot(cond_df, aes(x = effect, y = estimate, group = X, color = X_group)) +
geom_errorbar(aes(ymin = lower, ymax= upper), width=0.01, color = "grey50") +
geom_point() + geom_line() +
labs(x = "", y = "Conditional effect") +
theme_minimal() +
scale_y_continuous(limits = c(-0.75,0.75)) +
scale_x_discrete(labels = c("Admixed", "Unadmixed"), expand = c(0, 0.2))  +
scale_color_manual(name = "",
limits = c("resistance","ecophys", "stomata"),
values = c("#D55E00", "grey30", "#56B4E9")) +
theme(axis.line.y = element_line(colour = 'black', size=0.5, linetype='solid'),
axis.line.x = element_line(colour = 'black', size=0.5, linetype='solid'),
legend.position = "bottom",
legend.margin = margin(1,15,1,1),
legend.box.margin=margin(-10,-10,-10,-10),
legend.box.spacing = unit(1, "points"))
p0
rm(list=ls())
load("~/Dropbox/hybrid_trait/results/effects/admix/model/fit.rdis1.brms")
load("~/Dropbox/hybrid_trait/results/effects/admix/model/fit.rdis2.brms")
load("~/Dropbox/hybrid_trait/results/effects/admix/model/fit.rdis3.brms")
# disr1 (D)
disr1.me <- plot(conditional_effects(fit.rdis1, "admixed", categorical = T),
plot = FALSE,
cat_args = list(size=1.25))[[1]] +
theme_classic() +
labs(color="", fill="", x = '') + lims(y=c(0,1))+
#ggtitle("Dis1", subtitle = expression(paste(delta[italic(t)]," = 3.5 (2.4, 4.5)"))) +
ggtitle(expression(paste(italic(R)[1]))) +
theme(
panel.grid.major.x = element_line(color = "grey90"),
panel.grid.major.y = element_line(color = "grey90"),
plot.title = element_text(size = 11),
axis.title.x = element_blank(),
legend.key.height= unit(4, "mm"),
legend.key.width = unit(4, "mm"),
legend.title = element_text(size = 0),
legend.text  = element_text(size = 8),
legend.margin  = margin(0, 0, 0, 0, unit="mm"),
legend.spacing.x = unit(1, "mm"),# controls where text is on x-axis
legend.spacing.y = unit(-3, "mm") # controls vertical spot where legend appears.
) +
scale_x_discrete(limits = c("unadmixed", "admixed"), labels = c("U", "A"))
disr1.me
str(disr1.me)
disr1.me$data
# disr2 (D)
disr2.me <- plot(conditional_effects(fit.rdis2, "admixed", categorical = T),
plot = FALSE,
cat_args = list(size=1.35))[[1]] +
theme_classic() +
labs(color="", fill="", x="") +
#ggtitle("Dis2", subtitle = expression(paste(delta[italic(t)]," = 3.8 (3.1, 4.5)"))) +
ggtitle(expression(paste(italic(R)[2]))) +
theme(
panel.grid.major.x = element_line(color = "grey90"),
panel.grid.major.y = element_line(color = "grey90"),
plot.title = element_text(size = 11),
axis.title.y = element_blank(),
axis.title.x = element_blank(),
legend.key.height= unit(4, "mm"),
legend.key.width = unit(4, "mm"),
legend.title = element_text(size = 0),
legend.text  = element_text(size = 8),
legend.margin  = margin(0, 0, 0, 0, unit="mm"),
legend.spacing.x = unit(1, "mm"),# controls where text is on x-axis
legend.spacing.y = unit(-3, "mm") # controls vertical spot where legend appears.
) +
scale_x_discrete(limits = c("unadmixed", "admixed"), labels = c("U", "A"))
disr2.me
disr2.me$data
library(cowplot)
plot_grid(disr1.me, disr2.me, ncol=1)
q()
?coeffRV
coeffRV
?coeffRV
??coeffRV
citation("FactoMineR")
load("~/Dropbox/hybrid_trait/results/pls/pls_result/pls_plot")
ls()
p
h2 <- read.table("~/Dropbox/hybrid_trait/results/heritability/brms/H2_estimates.brms.txt",T,'\t')
load("~/Dropbox/hybrid_trait/results/pls/pls_result/pls_plot")
# extract the matrix of the scalar products.
x <- scale(p$mat, scale=F)
# Change the column names of mat to the varialbes
df <- data.frame(
Y = c("Y1","Y2","Y3","Y4","Y5","Y6","Y7",
"Y8","Y9","Y10","Y11","Y12","Y13","Y14","Y15","Y16","Y17",
"Y18","Y19","Y20","Y21","Y22","Y23","Y24","Y25"),
name = c("rDis1","rDis2","G","SR","AR","fsR","D_u","D_l",
"S_u","S_l","fs_u","fs_l","fs","gsmax_u","gsmax_l",
"gsmax","U_u","U_l","CN","percC","percN","D13C","d15N",
"SLA","CCI")
)
input = data.frame(Y=colnames(x))
colnames(x) <- plyr::join(input, df)$name
h2 <- read.table("~/Dropbox/hybrid_trait/results/heritability/brms/H2_estimates.brms.txt",T,'\t')
load("~/Dropbox/hybrid_trait/results/pls/pls_result/pls_plot")
# extract the matrix of the scalar products.
x <- scale(p$mat, scale=F)
# Change the column names of mat to the varialbes
df <- data.frame(
Y = c("Y1","Y2","Y3","Y4","Y5","Y6","Y7",
"Y8","Y9","Y10","Y11","Y12","Y13","Y14","Y15","Y16","Y17",
"Y18","Y19","Y20","Y21","Y22","Y23","Y24","Y25"),
name = c("rDis1","rDis2","G","SR","AR","fsR","D_u","D_l",
"S_u","S_l","fs_u","fs_l","fs","gsmax_u","gsmax_l",
"gsmax","U_u","U_l","CN","percC","percN","D13C","d15N",
"SLA","CCI")
)
input = data.frame(Y=colnames(x))
colnames(x) <- plyr::join(input, df)$name
# Extract the heritabilities
y1 <- h2 %>% filter(set == "admixed")
y2 <- h2 %>% filter(set == "unadmixed")
y <- data.frame(X = y1$X, H2a = scale(y1$H2, scale=F), H2u = scale(y2$H2, scale=F))
# Merge the x and y matrices into one, preserving the oder from x
dat <- merge(data.frame(X = rownames(t(x)), t(x)),
y,
by = "X")
dat
library(tidyverse)
library(FactoMineR)
# Load the H2 & Scalar products
h2 <- read.table("~/Dropbox/hybrid_trait/results/heritability/brms/H2_estimates.brms.txt",T,'\t')
load("~/Dropbox/hybrid_trait/results/pls/pls_result/pls_plot")
# extract the matrix of the scalar products.
x <- scale(p$mat, scale=F)
# Change the column names of mat to the varialbes
df <- data.frame(
Y = c("Y1","Y2","Y3","Y4","Y5","Y6","Y7",
"Y8","Y9","Y10","Y11","Y12","Y13","Y14","Y15","Y16","Y17",
"Y18","Y19","Y20","Y21","Y22","Y23","Y24","Y25"),
name = c("rDis1","rDis2","G","SR","AR","fsR","D_u","D_l",
"S_u","S_l","fs_u","fs_l","fs","gsmax_u","gsmax_l",
"gsmax","U_u","U_l","CN","percC","percN","D13C","d15N",
"SLA","CCI")
)
input = data.frame(Y=colnames(x))
colnames(x) <- plyr::join(input, df)$name
# Extract the heritabilities
y1 <- h2 %>% filter(set == "admixed")
y2 <- h2 %>% filter(set == "unadmixed")
y <- data.frame(X = y1$X, H2a = scale(y1$H2, scale=F), H2u = scale(y2$H2, scale=F))
# Merge the x and y matrices into one, preserving the oder from x
dat <- merge(data.frame(X = rownames(t(x)), t(x)),
y,
by = "X")
dat
x
colnames(dat)
colnames(dat) <- c("X", "B", "T", "A", "D", "H2a", "H2u")
dat
X = as.matrix(dat[,2:5])
Y = as.matrix(dat[,6:7])
# Perform the RV correlation
coeffRV(X=X, Y=Y)
dat
# Load data
load("~/Dropbox/hybrid_trait/results/multi_response/models/Yi_genomic/model_compare/two_responses/mod11.brms")
mod11
# read in the data that has the NewHybrids qmatrix
dat_in <- read.table("~/Dropbox/hybrid_trait/results/data2go/brms/phenotypes_ancestry_all_inds.txt",T,'\t')
library(tidyverse)
dat_in
# Select the qmatrix and remove missingness
qmat <- dat_in %>% select(ind_code, ancestry1, filial_call, prop_B, prop_T, prop_A, prop_D) %>% na.omit()
qmat
qmat
# Try pophelper
library(pophelper)
# Specify the path of the NH Qmat
sfile <- "~/Dropbox/hybrid_trait/results/data2go/brms/NewHybrids.Q"
# Read in the qmatrix
qmat <- readQ(files=sfile, filetype = 'basic')
qmat
dim(qmat)
lenth(qmat)
dim(qmat)
qmat
head(qmat)
dim(qmat$NewHybrids.Q)
library(tidyverse)
# Load the H2 & Scalar products
h2 <- read.table("~/Dropbox/hybrid_trait/results/heritability/brms/H2_estimates.brms.txt",T,'\t')
head(h2)
summary(h2$H2)
dim(h2)
aov(H2 ~ set , data = h2)
table(h2$set)
t.test(H2 ~ set, data = h2)
head(h2)
names(h2$X)
h2$X
# What's the mean of the upper stomatal traits for both sets?
h2 %>%
filter( X == c("D_u", "S_u", "U_u", "fs_u", "gsmax_u")) %>%
select(h2) %>%
mean()
# What's the mean of the upper stomatal traits for both sets?
h2 %>%
filter( X == c("D_u", "S_u", "U_u", "fs_u", "gsmax_u")) %>%
select(H2) %>%
mean()
h2 %>%
filter( X == c("D_u", "S_u", "U_u", "fs_u", "gsmax_u")) %>%
select(H2)
h2 %>%
filter( X == c("D_u", "S_u", "U_u", "fs_u", "gsmax_u"))
names(h2$X)
h2$X
# What's the mean of the upper stomatal traits for both sets?
h2 %>%
filter( X = c("D_u", "S_u", "U_u", "fs_u", "gsmax_u")) %>%
select(H2) %>%
mean()
# What's the mean of the upper stomatal traits for both sets?
h2 %>%
filter( X = c("D_u")) %>%
select(H2) %>%
mean()
h2 %>%
filter(X = c("D_u"))
# What's the mean of the upper stomatal traits for both sets?
h2 %>%
filter(X == c("D_u")) %>%
select(H2) %>%
mean()
h2 %>%
filter(X == c("D_u")) %>%
select(H2)
h2 %>%
filter(X == "D_u" | X == "S_u") %>%
select(H2) %>%
mean()
# What's the mean of the upper stomatal traits for both sets?
h2 %>%
filter(X == "D_u" | "S_u") %>%
select(H2) %>%
mean()
h2 %>%
filter(X == "D_u" | "S_u") %>%
select(H2)
# What's the mean of the upper stomatal traits for both sets?
h2[X == c("D_u", "S_u", "U_u", "fs_u", "gsmax_u"), h2]
h2$X == c("D_u", "S_u", "U_u", "fs_u", "gsmax_u")
h2
h2$x == c("U_u", "fs_u")
h2$X == c("U_u", "fs_u")
hs[h2$X == c("U_u", "fs_u"),]
h2[h2$X == c("U_u", "fs_u"),]
h2[h2$X == c("D_u","U_u", "fs_u"),]
# What's the mean of the upper stomatal traits for both sets?
h2[h2$X == c("D_u", "S_u", "U_u", "fs_u", "gsmax_u"), "h2"]
# What's the mean of the upper stomatal traits for both sets?
h2[h2$X == c("D_u", "S_u", "U_u", "fs_u", "gsmax_u"),]
# What's the mean of the upper stomatal traits for both sets?
h2[h2$X == c("D_u","U_u", "fs_u", "S_u", "fs_u", "gsmax_u"),]
h2[h2$X == c("D_u", "U_u", "fs_u"),]
# What's the mean of the upper stomatal traits for both sets?
h2[h2$X == c("D_u","U_u", "fs_u", "S_u", "fs_u", "gsmax_u"),]
# What's the mean of the upper stomatal traits for both sets?
h2 %>% filter(set == "admixed") %>%
filter(X == "D_u")
# What's the mean of the upper stomatal traits for both sets?
h2 %>% filter(set == "admixed") %>%
filter(X == "D_u" | "S_u")
# What's the mean of the upper stomatal traits for both sets?
h2 %>% filter(set == "admixed") %>%
filter(X == c("D_u", "S_u"))
# What's the mean of the upper stomatal traits for both sets?
h2 %>% filter(set == "admixed") %>%
filter(X == "D_u" & "S_u")
h2 %>% filter(set == "admixed") %>%
h2[h2$X == c("D_u","U_u", "fs_u", "S_u", "fs_u", "gsmax_u"),]
h2[h2$X == c("D_u","U_u", "fs_u", "S_u", "fs_u", "gsmax_u"),]
h2[h2$set == "admixed"]h2[h2$X == c("D_u","U_u", "fs_u", "S_u", "fs_u", "gsmax_u"),]
h2[h2$set == "admixed",]
h2[h2$set == "admixed",][h2$X ==  c("D_u","U_u", "fs_u", "S_u", "fs_u", "gsmax_u"),"H2"]
h2[h2$set == "admixed",][h2$X ==  c("D_u","U_u", "fs_u", "S_u", "fs_u", "gsmax_u"),]
h2[h2$set == c("D_u"),]
h2[h2$X == c("D_u"),]
h2[h2$X == c("D_u", "S_u"),]
# What's the mean of the upper stomatal traits for both sets?
# This is a bit odd, as I can't quite get the traits subset that I want without first seperating
# the data into admixed or unadmixed
h2a <- h2 %>% filter(set == "admixed")
h2a
# What's the mean of the upper stomatal traits for both sets?
# This is a bit odd, as I can't quite get the traits subset that I want without first seperating
# the data into admixed or unadmixed
h2a <- h2 %>% filter(set == "admixed") %>%
filter(X == "D_u" & "S_u")
# What's the mean of the upper stomatal traits for both sets?
# This is a bit odd, as I can't quite get the traits subset that I want without first seperating
# the data into admixed or unadmixed
h2a <- h2 %>% filter(set == "admixed") %>%
filter(X == ("D_u","S_u"))
# What's the mean of the upper stomatal traits for both sets?
# This is a bit odd, as I can't quite get the traits subset that I want without first seperating
# the data into admixed or unadmixed
h2a <- h2 %>% filter(set == "admixed") %>%
filter(X == c("D_u","S_u"))
h2a[h2a$X == c("D_u"), "H2"]
h2a[h2a$X == c("D_u", "S_u"), "H2"]
h2a[h2a$X = c("D_u", "S_u"), "H2"]
h2a
h2a
# What's the mean of the upper stomatal traits for both sets?
# This is a bit odd, as I can't quite get the traits subset that I want without first seperating
# the data into admixed or unadmixed
h2a <- h2 %>% filter(set == "admixed")
h2a
h2a[h2a$X = c("D_u", "S_u"), "H2"]
h2a[h2a$X == c("D_u", "S_u"), "H2"]
h2a
h2a[h2a$X == c("D_u"),]
h2a[h2a$X == c("D_u", "S_u"),]
h2
h2a[h2a$X %in% c("D_u", "S_u"), "H2"]
h2a[h2a$X %in% c("D_u", "S_u", "gsmax_u", "U_u", "fs_u"), "H2"]
mean(h2a[h2a$X %in% c("D_u", "S_u", "gsmax_u", "U_u", "fs_u"), "H2"])
mean(h2[h2$X %in% c("D_u", "S_u", "gsmax_u", "U_u", "fs_u"), "H2"])
h2[h2$X %in% c("D_u", "S_u", "gsmax_u", "U_u", "fs_u"), "H2"]
mean(h2[hs$X %in% c("D_l", "S_l", "U_l", "fs_l", "gsmax_l"), "H2"])
mean(h2[h2$X %in% c("D_l", "S_l", "U_l", "fs_l", "gsmax_l"), "H2"])
# Mean for ratio traits
mean(h2[h2$X %in% c("SR", "AR", "fsR"), "H2"]
)
mean(h2[h2$X %in% c("D_u", "S_u", "gsmax_u", "U_u", "fs_u"), "H2"])
# Mean for the lower stomatal sets
mean(h2[h2$X %in% c("D_l", "S_l", "U_l", "fs_l", "gsmax_l"), "H2"])
# Mean for ratio traits
mean(h2[h2$X %in% c("SR", "AR", "fsR"), "H2"])
unique(h2$X)
# Mean for ecophysiology
mean(h2[h2$X %in% c("percC", "D13C", "percN", "d15N", "CN", "SLA", "CCI", "G"), "H2"])
q()
library(randomForest)
setwd("~/Dropbox/oil_envr/results/bayes_oil_envr/models/")
list.files()
dat <- read.table("~/Dropbox/oil_envr/data/oil_bioclim.csv",T,'\t')
load("mod0.brms")
pp_check(mod0)
library(brms)
pp_check(mod0)
?pp_check
# Plot the posterior predictive distribtuions to evaluate goodnes of fit.
pp_check(mod0, type = "bars")
# Plot the posterior predictive distribtuions to evaluate goodnes of fit.
pp_check(mod0, type = "bar")
# Plot the posterior predictive distribtuions to evaluate goodnes of fit.
pp_check(mod0, type = "error_scatter")
# Plot the posterior predictive distribtuions to evaluate goodnes of fit.
pp_check(mod0, type = "error_binned")
# Plot the posterior predictive distribtuions to evaluate goodnes of fit.
pp_check(mod0, type = "stat")
# Plot the posterior predictive distribtuions to evaluate goodnes of fit.
pp_check(mod0, type = "interval")
# Plot the posterior predictive distribtuions to evaluate goodnes of fit.
pp_check(mod0, type = "intervals")
pp_check(mod0, type = "boxplot")
pp_check(mod0, type = "data")
pp_check(mod0, type = "dens")
pp_check(mod0, type = "dens_overlay")
pp_interval <- pp_check(mod0, type = "intervals") # this one is great for viewing clustering of the data.
pp_dens <- pp_check(mod0, type="dens_overlay") # good for viewing entire distribution
plot_grid(pp_dens, pp_interval, ncols = 2)
library(cowplot)
pp_interval <- pp_check(mod0, type = "intervals") # this one is great for viewing clustering of the data.
pp_dens <- pp_check(mod0, type="dens_overlay") # good for viewing entire distribution
plot_grid(pp_dens, pp_interval, ncols = 2)
plot_grid(pp_dens, pp_interval, ncols = 1)
plot_grid(pp_dens, pp_interval)
getwd()
?get_variables
library(tidybayes)
library(poppr)
install.packages("poppr")
install.packages(c("poppr", "mmod", "magrittr", "treemap"), repos = "http://cran.rstudio.com", dependencies = TRUE)
install.packages(c("poppr", "mmod", "magrittr", "treemap"), repos = "http://cran.rstudio.com", dependencies = TRUE)
install.packages(c("poppr", "mmod", "magrittr", "treemap"), repos = "http://cran.rstudio.com", dependencies = TRUE)
install.packages(c("poppr", "mmod", "magrittr", "treemap"), repos = "http://cran.rstudio.com", dependencies = TRUE)
install.packages(c("poppr", "mmod", "magrittr", "treemap"), repos = "http://cran.rstudio.com", dependencies = TRUE)
q()
