pwd
getwd()
setwd("/Users/kf/Dropbox/oil_envr/results/kinship/figs")
pdf("Variance-Covariance_histograms_v0.pdf",width = 4.5, height = 4.5)
pout
dev.off()
?save_plot
save_plot(
filename = "Variance-Covariance_histograms_v0.pdf",
plot = pout,
ncol = 1,
nrow = 1,
base_height = 4.5,
base_asp = 1,
base_width = NULL
)
cowplot::save_plot(
filename = "Variance-Covariance_histograms_v0.pdf",
plot = pout,
ncol = 1,
nrow = 1,
base_height = 4.5,
base_asp = 1,
base_width = NULL
)
cowplot::save_plot(
filename = "Variance-Covariance_histograms_v0.pdf",
plot = pout,
ncol = 1,
nrow = 1,
base_height = 4.5,
base_asp = 1,
base_width = NULL
)
cowplot::save_plot(
filename = "Variance-Covariance_histograms_v0.pdf",
plot = pout,
ncol = 1,
nrow = 1,
base_height = 4,
base_asp = 1.25,
base_width = NULL
)
cowplot::save_plot(
filename = "Variance-Covariance_histograms_v0.pdf",
plot = pout,
ncol = 1,
nrow = 1,
base_height = 4,
base_asp = 1.5,
base_width = NULL
)
heatmap.2()
heatmap2()
heatmap.2
heatmap.2()
gplots::heatmap.2()
install.packages(gplot2)
install.packages(gplots)
install.packages('gplots')
heatmap(kinship, Colv=NA, Rowv=NA, scale='none')
p0 <- cowplot::as_grob(heatmap(kinship, Colv=NA, Rowv=NA, scale='none'))
p0
plot(p9)
plot(p0)
rm(p0)
# Combine the kinship matrix and the histograms into a single plot.
# You'll need to remake the kinship matrix with a ggplot2 function to combine
p0 <- gplots::heatmap.2(kinship, dendrogram = 'none',
Rowv=TRUE, Colv=TRUE,trace='none')
p0
?heatmap.2
rev(heat.colors)
gplots::heatmap.2(kinship, dendrogram = 'none',
Rowv=TRUE, Colv=TRUE, trace='none',
density.info = 'none')
# Combine the kinship matrix and the histograms into a single plot.
# You'll need to remake the kinship matrix with a ggplot2 function to combine
p0 <- gplots::heatmap.2(kinship, dendrogram = 'none',
Rowv=TRUE, Colv=TRUE, trace='none',
key = FALSE)
p0
cowplot::plot_grid(h0, h1, p0, h2, ncol = 2, nrow = 2)
# Combine the kinship matrix and the histograms into a single plot.
# You'll need to remake the kinship matrix with a ggplot2 function to combine
p0 <- gplots::heatmap.2(kinship, dendrogram = 'none',
Rowv=TRUE, Colv=TRUE, trace='none',
key = FALSE)
cowplot::plot_grid(h0, h1, p0, h2, ncol = 2, nrow = 2)
# Combine the kinship matrix and the histograms into a single plot.
# You'll need to remake the kinship matrix with a ggplot2 function to combine
p0 <- cowplot::as_grob(gplots::heatmap.2(kinship, dendrogram = 'none',
Rowv=TRUE, Colv=TRUE, trace='none',
key = FALSE))
cowplot::plot_grid(h0, h1, p0, h2, ncol = 2, nrow = 2)
dim(snps)
dim(dat)
dim(dat1)
snps$ind_code
dat$ind_code
?venn
venn(list(snps$ind_code, dat$ind_code))
gplots::venn(list(snps$ind_code, dat$ind_code))
tmp <- gplots::venn(list(snps$ind_code, dat$ind_code))
tmp
names(tmp)
names(list(snps$ind_code, dat$ind_code))
list(snps$ind_code, dat$ind_code)
tmp <- \list(snps$ind_code, dat$ind_code)
tmp <- list(snps$ind_code, dat$ind_code)
tmp
names(tmp) <- c("genotypes", "traits")
tmp
tmp
l <- list(snps$ind_code, dat$ind_code)
names(l) <- c("genotypes", "traits")
l <- list(snps$ind_code, dat$ind_code)
names(l) <- c("genotypes", "traits")
gplots::venn(l)
overlap <- gplots::venn(l)
overlap
plot(overlap)
dev.off()
plot(overlap)
overlap
overlap[1]
overlap[2]
attr(overlap,"intersections")$`genotypes:traits`
# List of inds to keep
keep <- attr(overlap,"intersections")$`genotypes:traits`
keep
snps[keep]
snps[keep,]
head(snps)
keep
snps1 <- snps %>% filter(ind_code == keep)
snps1 <- snps %>% select(ind_code == keep)
snps
names(snps)
keep
snps %>% filter(ind_code == "659440-16")
snps1 <- snps %>% filter(ind_code %in% keep)
dim(snps1)
snps1
# filter for phenotypes
dat1 <- dat %>% filter(ind_code %in% keep)
dim(dat1)
head(dat1)
head(snps1)
# Filter for snps
snps1 <- snps %>% filter(ind_code %in% keep) %>%
sort(ind_code)
# filter for phenotypes
dat1 <- dat %>%
filter(ind_code %in% keep) %>%
arrange(ind_code)
dat1
dat1$ind_code
head(dat1)
# Filter for snps
snps1 <- snps %>%
filter(ind_code %in% keep) %>%
arrange(ind_code)
head(snps1)
# Convert the genotypes into 012 format
snps_agh <- snps1 %>%
select(-ind_code) %>%
mutate_all(
funs(case_when(
. == 11 ~ 0,
. == 12 ~ 1,
. == 21 ~ 1,
. == 22 ~ 2
))
) %>%
# Replace missing sites with -9
snps_agh[is.na(snps_agh)] <- -9
# Convert the genotypes into 012 format
snps_agh <- snps1 %>%
select(-ind_code) %>%
mutate_all(
funs(case_when(
. == 11 ~ 0,
. == 12 ~ 1,
. == 21 ~ 1,
. == 22 ~ 2
))
)
# Replace missing sites with -9
snps_agh[is.na(snps_agh)] <- -9
dim(snps_agh)
#Computing the additive relationship matrix based on VanRaden 2008
A <- Gmatrix(SNPmatrix = as.matrix(snps_agh), missingValue=-9,
maf=0.05, method="VanRaden")
# View the kinship matrix & save it
# The names need fixing up, (or turn them off & use population labels.)
heatmap(A)
# View a histogram of the self-variance components (the diagonal)
h0 <- ggplot(data.frame(V1=diag(A)), aes(x=V1))  +
geom_histogram(bins = 25, color="black", fill="grey", lwd=0.3) +
theme_minimal() +
labs(x="Self-variances of A")
# View a histogram of the variance estimates.
h1 <- ggplot(data.frame(V1=kinship[upper.tri(A)]), aes(x=V1))  +
geom_histogram(bins = 25, color="black", fill="grey", lwd=0.3) +
theme_minimal() +
labs(x="Covariances of A")
# Absolute value of covariance estimates
h2 <- ggplot(data.frame(V1=abs(kinship[upper.tri(A)])), aes(x=V1))  +
geom_histogram(bins = 25, color="black", fill="grey", lwd=0.3) +
theme_minimal() +
labs(x="Absolute value of covariances of A")
# plot them together & save
pout <- cowplot::plot_grid(h0, h1, NA, h2, ncol = 2, nrow = 2)
setwd("/Users/kf/Dropbox/oil_envr/results/kinship/figs")
cowplot::save_plot(
filename = "Variance-Covariance_histograms_N140_v0.pdf",
plot = pout,
ncol = 1,
nrow = 1,
base_height = 4,
base_asp = 1.5,
base_width = NULL
)
pout
# plot them together & save
pout <- cowplot::plot_grid(h0, h1, h2, ncol = 1, nrow = 3)
pout
cowplot::save_plot(
filename = "Variance-Covariance_histograms_N140_v1.pdf",
plot = pout,
ncol = 1,
nrow = 1,
base_height = 6,
base_asp = 0.33,
base_width = NULL
)
cowplot::save_plot(
filename = "Variance-Covariance_histograms_N140_v1.pdf",
plot = pout,
ncol = 1,
nrow = 1,
base_height = 6,
base_asp = 0.55,
base_width = NULL
)
citation('AGHmatrix')
?Gmatrix
#Computing the additive relationship matrix based on VanRaden 2008
G <- Gmatrix(SNPmatrix = as.matrix(snps_agh), missingValue=-9,
maf=0.05, method="VanRaden")
# View the kinship matrix & save it
# The names need fixing up, (or turn them off & use population labels.)
heatmap(G)
# View a histogram of the self-variance components (the diagonal)
h0 <- ggplot(data.frame(V1=diag(G)), aes(x=V1))  +
geom_histogram(bins = 25, color="black", fill="grey", lwd=0.3) +
theme_minimal() +
labs(x="Self-variances of A")
# View a histogram of the variance estimates.
h1 <- ggplot(data.frame(V1=kinship[upper.tri(G)]), aes(x=V1))  +
geom_histogram(bins = 25, color="black", fill="grey", lwd=0.3) +
theme_minimal() +
labs(x="Covariances of A")
# Absolute value of covariance estimates
h2 <- ggplot(data.frame(V1=abs(kinship[upper.tri(G)])), aes(x=V1))  +
geom_histogram(bins = 25, color="black", fill="grey", lwd=0.3) +
theme_minimal() +
labs(x="Absolute value of covariances of A")
# plot them together & save
pout <- cowplot::plot_grid(h0, h1, h2, ncol = 1, nrow = 3)
setwd("/Users/kf/Dropbox/oil_envr/results/kinship/figs")
cowplot::save_plot(
filename = "Variance-Covariance_histograms_N140_v1.pdf",
plot = pout,
ncol = 1,
nrow = 1,
base_height = 6,
base_asp = 0.55,
base_width = NULL
)
pop_mod3 <- brm(sat ~ 1 + deme + (1|gr(ind_code, cov = G)),
data = dat1,
data2 = list(A = G),
family = "gaussian",
seed = 2398, chains = 4L, iter = 6000)
G
pop_mod3 <- brm(sat ~ 1 + deme + (1|gr(ind_code, cov = G)),
data = dat1,
data2 = list(A = G),
family = "gaussian",
seed = 2398, chains = 4L, iter = 6000)
pop_mod3 <- brm(sat ~ 1 + deme + (1|gr(ind_code, cov = G)),
data = dat1,
data2 = list(G = G),
family = "gaussian",
seed = 2398, chains = 4L, iter = 6000)
row.names(G)
# Set the row names
row.names(G) <- snps1$ind_code
G
# View the kinship matrix & save it
# The names need fixing up, (or turn them off & use population labels.)
heatmap(G)
pop_mod3 <- brm(sat ~ 1 + deme + (1|gr(ind_code, cov = G)),
data = dat1,
data2 = list(G = G),
family = "gaussian",
seed = 2398, chains = 4L, iter = 6000)
pop_mod3
dev.off()
pp_check(pop_mod3)
pop_mod3
names(dat1)
pop_mod3 %>% posterior_samples()
pop_mod3 %>% posterior_samples() %>% names()
# Read in the blocking effects
block <- read.table("~/Dropbox/oil_envr/data/block_effects/blocks.txt",T,'\t')
dim(block)
head(block)
dat3 <- merge(dat, block, by = "ind_code")
dim(dat3)
head(dat)
head(dat3)
l1 <- list(dat$ind_code, block$ind_code)
venn(l1)
gplot::venn(l1)
gplots::venn(l1)
dim(dat)
dim(block)
dim(dat3)
dev.off()
# Add the block to 'dat' and overwrite it
dat <- merge(dat, block, by = "ind_code")
names(dat)
head(dat)
# Read in the data
dat <- read.table("~/Dropbox/oil_envr/data/trait/oil_bioclim_ancestry_N153.txt",T,'\t')
head(dat)
head(block)
table(dat$family)
# Read in the data
dat <- read.table("~/Dropbox/oil_envr/data/trait/oil_bioclim_ancestry_N153.txt",T,'\t')
table(dat$usda_pop)
head(dat)
# Read in the blocking effects
block <- read.table("~/Dropbox/oil_envr/data/block_effects/blocks.txt",T,'\t')
# Add the block to 'dat' and overwrite it
dat <- merge(dat, block, by = "ind_code")
names(dat)
head(dat)
table(dat$deme)
dat$deme
dat
snps
snps1
snps$ind_code
29273-1
# Read in the data
dat <- read.table("~/Dropbox/oil_envr/data/trait/oil_bioclim_ancestry_N153.txt",T,'\t')
filter(dat, ind_code == "29273-1")
# Read in the data
dat <- read.table("~/Dropbox/oil_envr/data/trait/oil_bioclim_ancestry_N153.txt",T,'\t')
# Read in the blocking effects
block <- read.table("~/Dropbox/oil_envr/data/block_effects/blocks.txt",T,'\t')
# Add the block to 'dat' and overwrite it
dat <- merge(dat, block, by = "ind_code")
# Calculate the breeding values
bv <- dat %>%
mutate(bv_sat = 2*(sat - mean(sat))) %>%
select(-Pal, -Ste, -ol, -lin, -sat, -unsat)
bv
names(dat)
l <- list(snps$ind_code, dat$ind_code)
names(l) <- c("genotypes", "traits")
overlap <- gplots::venn(l)
plot(overlap)
# List of inds to keep
keep <- attr(overlap,"intersections")$`genotypes:traits`
# Filter for snps
snps1 <- snps %>%
filter(ind_code %in% keep) %>%
arrange(ind_code)
# filter for phenotypes
dat1 <- dat %>%
filter(ind_code %in% keep) %>%
arrange(ind_code)
# Convert the genotypes into 012 format
snps_agh <- snps1 %>%
select(-ind_code) %>%
mutate_all(
funs(case_when(
. == 11 ~ 0,
. == 12 ~ 1,
. == 21 ~ 1,
. == 22 ~ 2
))
)
# Replace missing sites with -9
snps_agh[is.na(snps_agh)] <- -9
pop_mod3 <- brm(sat ~ 1 + block + deme + (1|gr(ind_code, cov = G)),
data = dat1,
data2 = list(G = G),
family = "gaussian",
seed = 2398, chains = 4L, iter = 6000)
pop_mod4 <- brm(sat ~ 1 + block + deme + (1|gr(family/ind_code, cov = G)),
data = dat1,
data2 = list(G = G),
family = "gaussian",
seed = 2398, chains = 4L, iter = 6000)
pop_mod4 <- brm(sat ~ 1 + block + deme + (1|gr(family:ind_code, cov = G)),
data = dat1,
data2 = list(G = G),
family = "gaussian",
seed = 2398, chains = 4L, iter = 6000)
head(dat1)
# Read in the data
dat0 <- read.table("~/Dropbox/oil_envr/data/trait/oil_bioclim_ancestry_N153.txt",T,'\t')
head(Dat0)
head(dat0)
names(dat)[29]
head(dat1)
pop_mod4 <- brm(sat ~ 1 + block + deme + (1|gr(pop_code:ind_code, cov = G)),
data = dat1,
data2 = list(G = G),
family = "gaussian",
seed = 2398, chains = 4L, iter = 6000)
pop_mod4 <- brm(sat ~ 1 + block + deme + (1|gr(ind_code:pop_code, cov = G)),
data = dat1,
data2 = list(G = G),
family = "gaussian",
seed = 2398, chains = 4L, iter = 6000)
pop_mod4 <- brm(sat ~ 1 + block + deme + (1|pop_code/gr(ind_code, cov = G)),
data = dat1,
data2 = list(G = G),
family = "gaussian",
seed = 2398, chains = 4L, iter = 6000)
pop_mod4 <- brm(sat ~ 1 + block + deme + (1|pop_code:gr(ind_code, cov = G)),
data = dat1,
data2 = list(G = G),
family = "gaussian",
seed = 2398, chains = 4L, iter = 6000)
pop_mod3
pop_mod4 %>% posterior_samples() %>% names()
pop_mod3 %>% posterior_samples() %>% names()
pop_mod3
# Pull out the posterior sample and square them.
# These are the variance components
out <- pop_mod4 %>%
posterior_samples(.vars=2:4, .funs=funs(.^2))
# Pull out the posterior sample and square them.
# These are the variance components
out <- pop_mod3 %>%
posterior_samples(.vars=2:4, .funs=funs(.^2))
names(out)
out
names(out)
# Calculate Pst from the correct variance components.
qst = out$b_demesouth /
(out$b_demesouth + 2 * out$sd_ind_code__Intercept)
median_qi(qst)
??median_qi
library(tidyverse)
median_qi(qst)
?tidybayes::median_qi
tidybayes::median_qi(qst)
pop_mod3
Va = 4 * 0.97
Vp = 4.6 + 0.1 + 1.78 + 0.97
Va/Vp
tidybayes::median_qi(qst)
head(qst)
ggplot(data.frame(Qst=qst), aes(x=Qst))  +
geom_histogram(bins = 25, color="black", fill="grey", lwd=0.3) +
theme_minimal() +
labs(x=expression(paste(italic(Q)[ST])))
pop_mod2 <- brm(sat ~ 1 + block + (1|deme/family),
data = dat,
family = "gaussian",
seed = 2398, chains = 4L, iter = 6000)
# This seems reasonable based on the notion that each family is a population.
# pollen were collected from population and bred to a single female.
# This seems to work
names(dat)[29] <- "family"
pop_mod2 <- brm(sat ~ 1 + block + (1|deme/family),
data = dat,
family = "gaussian",
seed = 2398, chains = 4L, iter = 6000)
setwd("../../bayes_oil_envr/models/")
save(pop_mod3, file="pop_mod3.brms")
save(pop_mod2, file="pop_mod2.brms")
pop_mod4 <- brm(sat ~ 1 + block + (1 + deme|gr(ind_code, cov = G)),
data = dat1,
data2 = list(G = G),
family = "gaussian",
seed = 2398, chains = 4L, iter = 6000)
pop_mood4
pop_mod4
pop_mod4
pop_mod4 %>% posterior_predict()
pop_mod4 %>% posterior_samples() %>% head()
pop_mod4 %>% posterior_samples() %>% names()
pop_mod4
plot(pop_mod4)
save(pop_mod4, file="pop_mod4")
save(pop_mod4, file="pop_mod4.brms")
conditional_effects(pop_mod4)
conditional_effects(pop_mod3)
dat1 %>% names()
ls()
ls()
q()
