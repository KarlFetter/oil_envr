library(brms)
library(RStan)
library(dplyr)
install.packages("brms")
library("brms")
install.packages("pkgbuild"
)
install.packages("pkgbuild")
library("pkgbuild")
library("brms")
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
remove.packages("brms")
if (file.exists(".RData")) file.remove(".RData")
q()
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
dotR <- file.path(Sys.getenv("HOME"), ".R")
if (!file.exists(dotR)) dir.create(dotR)
M <- file.path(dotR, ifelse(.Platform$OS.type == "windows", "Makevars.win", "Makevars"))
if (!file.exists(M)) file.create(M)
cat("\nCXX14FLAGS=-O3 -march=native -mtune=native",
if( grepl("^darwin", R.version$os)) "CXX14FLAGS += -arch x86_64 -ftemplate-depth-256" else
if (.Platform$OS.type == "windows") "CXX11FLAGS=-O3 -march=corei7 -mtune=corei7" else
"CXX14FLAGS += -fPIC",
file = M, sep = "\n", append = TRUE)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
install.packages("brms")
library(brms)
library("rstan")
devtools::session_info(“rstan”)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
Sys.setenv(MAKEFLAGS = "-j4")
install.packages("rstan", type = "source")
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
remove.packages("brms")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
library("rstan")
install.packages("brms")
q()
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
libray("RStan")
library("RStan")
library"Rstan"
library("Rstan")
library("rstan")
Sys.unsetenv("PKG_CXXFLAGS")
library("rstan")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
library(rstantools)
library(brms)
install.packages("brms")
library(brms)
Rcpp::sourceCpp(“helloworld.cpp”
Rcpp::sourceCpp(“helloworld.cpp”)
Rcpp::sourceCpp(“helloworld.cpp”)
Rcpp::sourceCpp("helloworld.cpp")
install.packages("Rcpp")
install.packages("Rcpp")
library(Rcpp)
Rcpp::sourceCpp("helloworld.cpp")
Rcpp::sourceCpp(“helloworld.cpp”)
library(rstan)
install.packages("rstan")
install.packages("rstan")
remove.packages("rstan")
install.packages("rstan", type = "source")
remove.packages("rstan")
remotes::install_github("stan-dev/rstan", ref = "develop",
subdir = "rstan/rstan", build_opts = "")
install.packages("tictoc")
library(parallel)
devtools::install_github("paul-buerkner/brms")
install.packages("devtools")
library("devtools")
devtools::install_github("hadley/devtools")
install.packages("devtools")
rstudio &
install.packages("testthat")
library(Rcpp)
install.packages("devtools", repo = 'https://mac.R-project.org')
library(brms)
?dplyr::left_join
187.5 + 45.36
b = 13.05 * 1000
b
sl = * 13.80 * 1000
sl =  13.80 * 1000
sl - b
ls()
base_q = (27500)/2
base_q
base_q/45
install.packages(c("brms", "ggplot2"))
library(ggplot2)
install.packages("ggplot2")
install.packages("cowplot")
library(dplyr)
q()
#Install packages (Do this section only for new installation of R)
#-------------------------------------------------------------------------------
source("http://www.bioconductor.org/biocLite.R")
biocLite("multtest")
install.packages("gplots")
library("gplots")
source("http://zzlab.net/GAPIT/GAPIT.library.R") source("http://zzlab.net/GAPIT/gapit_functions.txt")
source("http://zzlab.net/GAPIT/GAPIT.library.R") source("http://zzlab.net/GAPIT/gapit_functions.txt")
source("http://zzlab.net/GAPIT/GAPIT.library.R")
source("http://zzlab.net/GAPIT/gapit_functions.txt")
library(LDheatmap)
source("http://www.zzlab.net/GAPIT/emma.txt")
source("http://www.zzlab.net/GAPIT/gapit_functions.txt")
ancestry <- read.table("~/Dropbox/hybrid_trait/results/data2go/brms/ancestry_data.txt",T,'\t')
z.dat_in <- read.table("~/Dropbox/hybrid_trait/results/data2go/brms/rescaled_data_by-area_id_N-1539.dat",T,'\t')
z.dat <- full_join(z.dat_in, ancestry, by = "ind_code")
library(tidyverse)
library(brms)
ancestry <- read.table("~/Dropbox/hybrid_trait/results/data2go/brms/ancestry_data.txt",T,'\t')
z.dat_in <- read.table("~/Dropbox/hybrid_trait/results/data2go/brms/rescaled_data_by-area_id_N-1539.dat",T,'\t')
z.dat <- full_join(z.dat_in, ancestry, by = "ind_code")
z.dat
names(z.dat)
# Build a some models to explore the effect of the S ~ D relationship on R
fit0 <- brm(r1 ~ z.S + z.D + prop_B + (1|ind_code),
data = z.dat,
family = cumulative(),
cores = getOption("mc.cores", 4L),
control = list(adapt_delta = 0.99, max_treedepth = 15)) %>%
add_criterion("loo")
R.Version
R.Version()
library(tidyverse)
library(brms)
ancestry <- read.table("~/Dropbox/hybrid_trait/results/data2go/brms/ancestry_data.txt",T,'\t')
z.dat_in <- read.table("~/Dropbox/hybrid_trait/results/data2go/brms/rescaled_data_by-area_id_N-1539.dat",T,'\t')
z.dat <- full_join(z.dat_in, ancestry, by = "ind_code")
# Input data by image
mod0 <- brm(r1 ~ z.gsmax + z.fs + z.fs:z.gsmax + prop_B + (1|ind_code),
data = z.dat,
family = cumulative(),
chains = 4L, seed = 2398, iter = 8000,
cores = getOption("mc.cores", 4L),
control=list(adapt_delta=0.99, max_treedepth = 15)) %>%
add_criterion("loo", reloo = "TRUE")
cl <- parallel::makeCluster(2, setup_strategy = "sequential")
cl
ancestry <- read.table("~/Dropbox/hybrid_trait/results/data2go/brms/ancestry_data.txt",T,'\t')
z.dat_in <- read.table("~/Dropbox/hybrid_trait/results/data2go/brms/rescaled_data_by-area_id_N-1539.dat",T,'\t')
z.dat <- full_join(z.dat_in, ancestry, by = "ind_code")
# Input data by image
mod0 <- brm(r1 ~ z.gsmax + z.fs + z.fs:z.gsmax + prop_B + (1|ind_code),
data = z.dat,
family = cumulative(),
chains = 4L, seed = 2398, iter = 8000,
cores = getOption("mc.cores", 4L),
control=list(adapt_delta=0.99, max_treedepth = 15)) %>%
add_criterion("loo", reloo = "TRUE")
R.Version()
library(brms)
library(tidybayes)
ancestry <- read.table("~/Dropbox/hybrid_trait/results/data2go/brms/ancestry_data.txt",T,'\t')
z.dat_in <- read.table("~/Dropbox/hybrid_trait/results/data2go/brms/rescaled_data_by-area_id_N-1539.dat",T,'\t')
z.dat <- full_join(z.dat_in, ancestry, by = "ind_code")
# Input data by image
mod0 <- brm(r1 ~ z.gsmax + z.fs + z.fs:z.gsmax + prop_B + (1|ind_code),
data = z.dat,
family = cumulative(),
chains = 4L, seed = 2398, iter = 8000,
cores = getOption("mc.cores", 4L),
control=list(adapt_delta=0.99, max_treedepth = 15)) %>%
add_criterion("loo", reloo = "TRUE")
library(tidyverse)
ancestry <- read.table("~/Dropbox/hybrid_trait/results/data2go/brms/ancestry_data.txt",T,'\t')
z.dat_in <- read.table("~/Dropbox/hybrid_trait/results/data2go/brms/rescaled_data_by-area_id_N-1539.dat",T,'\t')
z.dat <- full_join(z.dat_in, ancestry, by = "ind_code")
# Input data by image
mod0 <- brm(r1 ~ z.gsmax + z.fs + z.fs:z.gsmax + prop_B + (1|ind_code),
data = z.dat,
family = cumulative(),
chains = 4L, seed = 2398, iter = 8000,
cores = getOption("mc.cores", 4L),
control=list(adapt_delta=0.99, max_treedepth = 15)) %>%
add_criterion("loo", reloo = "TRUE")
rstan:::get_CXX()
R.Version()
ancestry <- read.table("~/Dropbox/hybrid_trait/results/data2go/brms/ancestry_data.txt",T,'\t')
z.dat_in <- read.table("~/Dropbox/hybrid_trait/results/data2go/brms/rescaled_data_by-area_id_N-1539.dat",T,'\t')
z.dat <- full_join(z.dat_in, ancestry, by = "ind_code")
# Input data by image
mod0 <- brm(r1 ~ z.gsmax + z.fs + z.fs:z.gsmax + prop_B + (1|ind_code),
data = z.dat,
family = cumulative(),
chains = 4L, seed = 2398, iter = 8000,
cores = getOption("mc.cores", 4L),
control=list(adapt_delta=0.99, max_treedepth = 15)) %>%
add_criterion("loo", reloo = "TRUE")
ancestry <- read.table("~/Dropbox/hybrid_trait/results/data2go/brms/ancestry_data.txt",T,'\t')
z.dat_in <- read.table("~/Dropbox/hybrid_trait/results/data2go/brms/rescaled_data_by-area_id_N-1539.dat",T,'\t')
z.dat <- full_join(z.dat_in, ancestry, by = "ind_code")
# Input data by image
mod0 <- brm(r1 ~ z.gsmax + z.fs + z.fs:z.gsmax + prop_B + (1|ind_code),
data = z.dat,
family = cumulative(),
chains = 4L, seed = 2398, iter = 8000,
cores = getOption("mc.cores", 4L),
control=list(adapt_delta=0.99, max_treedepth = 15)) %>%
add_criterion("loo", reloo = "TRUE")
38 / 38 + 0
38 / 38 + 0
0 / 38 + 0
34 / (34 + 0)
0 / (34 + 0)
s_in <- read.table("~/Dropbox/hybrid_trait/data/stomata/stomata_data_area_id.txt",T,'\t')
s_in
head(s_in)
s_in <- read.table("~/Dropbox/hybrid_trait/data/stomata/stomata_data_area_id.txt",T,'\t')
map <- read.table("~/Dropbox/hybrid_trait/data/meta_data/map/VT_gardenMap_MASTER_fixed.csv",T,',')
# merge the two
s <- left_join(s_in, map, by="rep_code") %>%
select(ind_code = ind_code.x, rep_code = rep_code, area_id,
row = row_num, col = tree_num, ad_presence, ab_stomata_count,
ad_stomata_count, ab_pore_length, ad_pore_length, ab_porosity,
ad_porosity, to_porosity)
library(tidyverse)
jjjjjjjjjjjjjjjj
s_in <- read.table("~/Dropbox/hybrid_trait/data/stomata/stomata_data_area_id.txt",T,'\t')
map <- read.table("~/Dropbox/hybrid_trait/data/meta_data/map/VT_gardenMap_MASTER_fixed.csv",T,',')
# merge the two
s <- left_join(s_in, map, by="rep_code") %>%
select(ind_code = ind_code.x, rep_code = rep_code, area_id,
row = row_num, col = tree_num, ad_presence, ab_stomata_count,
ad_stomata_count, ab_pore_length, ad_pore_length, ab_porosity,
ad_porosity, to_porosity)
s
head(s)
q()
library(poppr)
library(adegenet)
install.packages("adegenet")
install.packages("adegenet")
library(adegenet)
install.packages("poppr")
install.packages("poppr")
library(poppr)
library(ape)
install.packages("ape")
install.packages("ape")
library(poppr)
read.genalex()
?read.genalex
library(poppr)
setwd("~/Dropbox/oil_envr/data/dryad/")
list.file()
list.files()
snps <- read.genalex("10_16_16_Genotype_Data.xlsx")
snps <- read.genalex("genotypes.csv")
snps
list.files()
snps <- read.genalex("10_16_16_Genotype_Data.csv")
snps
snps <- read.genalex(system.file("~/Dropbox/oil_envr/data/dryad/genotypes.csv", package="poppr"))
snps
snps <- read.genalex("genotypes.csv")
snps
snps <- read.genalex("genotypes.csv")
snps
snps <- read.genalex(system.file("~/Dropbox/oil_envr/data/dryad/genotypes.csv", package="poppr"))
snps
snps <- read.genalex("genotypes.csv")
snps <- read.genalex("genotypes.csv",T)
?read.genalex
snps <- read.genalex("genotypes.csv",T)
snps <- read.genalex("genotypes.csv",T)
snps
snps <- read.genalex("genotypes.csv",T)
snps <- read.genalex("genotypes.csv",T)
snps
?read.genalex
snps <- read.genalex("genotypes.csv",T)
snps <- read.genalex("genotypes.csv",T)
snps <- read.genalex("genotypes.csv",T)
snps <- read.genalex("genotypes.csv",T)
?read.genalex
snps <- read.genalex("genotypes.csv",T, region=T)
snps
rm(snps)
snps <- read.genalex("genotypes.csv",T, region=T)
snps <- read.genalex("genotypes.csv",T, ploidy = 2, geo = F, region=T)
snps <- read.genalex("genotypes.csv", ploidy = 2, geo = F, region=T)
snps <- read.genalex("genotypes.csv", ploidy = 2, geo = F, region=T)
snps <- read.genalex("genotypes.csv", ploidy = 2, geo = T, region=T)
snps
ex <- read.genalex("example.csv")
ex <- read.genalex("example.csv")
ex
snps <- read.genalex("genotypes.csv", ploidy = 2, geo = F, region=F)
snps
snps <- read.genalex("genotypes.csv", ploidy = 2, geo = F, region=T)
snps
snps <- read.genalex("genotypes.csv", ploidy = 2, geo = T, region=T)
snps
snps <- read.genalex("genotypes.csv")
snps
491-245
snps <- read.genalex("genotypes.csv")
snps
snps <- read.genalex("genotypes.csv")
snps <- read.genalex("genotypes.csv")
snps
snps <- read.genalex("genotypes.csv")
class(snps)
?read.genalex
snps <- read.genalex("genotypes.csv", genclone = F)
class(snps)
install.packages("remotes")
remotes::install_github("thierrygosselin/radiator")
library(radiator)
?genomic_converter
# Export the genind object
radiator::genomic_converter(
data = snps,
output = "plink",
filename = "wild_annuus_N286_SNPs246")
list.files()
snps
Gst_Hedrick(nancycats)
library(poppr)
genind2df(snps)
setwd("~/Dropbox/oil_envr/data/dryad/")
# Read in the GenAlEx file as a genind object
snps <- read.genalex("genotypes.csv", genclone = F)
snps
rm(snps)
# Read in the GenAlEx file as a genind object
snps <- read.genalex("genotypes.csv", genclone = F)
snps
# Export the genind object
radiator::genomic_converter(
data = snps,
output = "plink",
filename = "wild_annuus_N286_SNPs246")
# Export the genind object
radiator::genomic_converter(
data = snps,
output = "plink")
# Export the genind object
radiator::genomic_converter(
data = snps,
output = c("plink"))
# Export the genind object
radiator::genomic_converter(
data = snps,
output = c("vcf"))
# Export the genind object
radiator::genomic_converter(
data = snps,
output = vcf)
?genomic_converter
snps
genind2df(snps)
t(genind2df(snps))
genind2df(snps)
genind2df(snps)
?detect_genomic_format
detect_genomic_format(snps)
library(radiator)
# Export the genind object
genomic_converter(
data = snps,
output = "vcf")
# Export the genind object
genomic_converter(
data = snps,
output = "vcf",
file="output")
# Export the genind object
genomic_converter(
data = snps,
output = "vcf",
filename="output")
# Export the genind object
genomic_converter(
snps,
output = "vcf",
filename = "output")
# Export the genind object
genomic_converter(
data = "snps",
output = "vcf",
filename = "output")
# Export the genind object
genomic_converter(
data = "snps",
output = "vcf",
filename = "./output")
# Export the genind object
genomic_converter(
data = "snps",
output = "vcf",
filename = "output.vcf")
# Export the genind object
genomic_converter(
data = snps)
# Export the genind object
genomic_converter(
data = snps,
output = "vcf",
filename = "output")
# Export the genind object
genomic_converter(
data = snps,
output = "genind",
filename = "output")
# Export the genind object
out <- genomic_converter(
data = snps,
output = "vcf",
filename = "output")
out
out <- tidy_genomic_data(snps)
out
genind2df(snps)
genind2df(snps)
df <- genind2df(snps)
write_plink(data = df, filename="output")
?write_genind
write_genind(data = snps, write=TRUE)
write_genind(data = snps, write=TRUE, filename="output")
write_genind(data = snps, write=TRUE, file="output")
write_genind(data = snps)
# Verify the format of the data
detect_genomic_format(snps)
write.table(snps, file="snps.genind", quote=F)
# Export the genind object
genomic_converter(
data = snps.genind,
output = "vcf",
filename = "output")
# Export the genind object
genomic_converter(
data = "snps.genind",
output = "vcf",
filename = "output")
# Convert genind file to tidy genomic data
tidy_genomic_data(
data = "snps.genind",
filename = snps)
# Convert genind file to tidy genomic data
tidy_genomic_data(
data = "snps.genind")
# Convert genind file to tidy genomic data
tidy_genomic_data(
data = snps)
list.files()
# Convert genind file to tidy genomic data
tidy_genomic_data(
data = "snps.genind")
detect_genomic_format("snps.genind")
# Save the genind to file as a normal table
write.table(snps, file="snps.genind", quote=F, sep='\t', row.names = F)
detect_genomic_format("snps.genind")
# Verify the format of the data
detect_genomic_format(snps)
write_genind(snps)
install.packages("remotes")
remotes::install_github("romunov/zvau")
library(zvau)
# Save the genind to file.
zvau::writeGenPop(snps, "snps.genind", comment = "genind object of wild annuus snps")
# Save the genind to file.
zvau::writeGenPop(snps, "snps.genind", comment = "genind object of wild annuus snps")
# Save the genind to file.
zvau::writeGenPop(snps, "snps.genind", comment = "genind object of wild annuus snps. 286 individuals and 246 diploid sites.")
# Convert genind file to tidy genomic data
tidy_genomic_data(
data = "snps.genind")
# Save the genind to file.
zvau::writeGenPop(snps, "snps.genpop", comment = "genind object of wild annuus snps. 286 individuals and 246 diploid sites.")
# Save the genind to file.
zvau::writeGenPop(snps, "snps.genpop", comment = "genpop object of wild annuus snps. 286 individuals and 246 diploid sites.")
# Convert genind file to tidy genomic data
tidy_genomic_data(
data = "snps.genpop")
# Convert genind file to tidy genomic data
tidy_genomic_data(data = "snps.genpop")
# Convert genind file to tidy genomic data
tidy_genomic_data("./snps.genpop")
readr::write_tsv()
install.packages("readr")
# Convert genind file to tidy genomic data
tidy_genomic_data("snps.genpop")
install.packages('dartR')
# Convert genind to genlight
snps.gl <- dartR::gi2gl(snps)
install.packages("SNPRelate")
BiocManager::install("SNPRelate")
# Convert genind to genlight
snps.gl <- dartR::gi2gl(snps)
snps.gl
BiocManager::install("SNPRelate")
# Convert genind to genlight
snps.gl <- dartR::gi2gl(snps)
library(dartR)
# Convert genind to genlight
snps.gl <- dartR::gi2gl(snps)
snps.gl
q()
