knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(mapdata)
library(maptools)
library(usmap)
library(raster)
library(maps)
library(grid)
install.packages(ggsn)
install.packages("ggsn")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(mapdata)
library(maptools)
library(usmap)
library(raster)
library(maps)
library(ggsn)
install.packages("sf")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(mapdata)
library(maptools)
library(usmap)
library(raster)
library(maps)
library(ggsn)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(mapdata)
library(maptools)
library(usmap)
library(raster)
library(maps)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(plotrix)
# Load tidyverse and plottrix.
# Plottrix contains the function to estimate the standard errors.
library(tidyverse)
library(plotrix)
# Load the data
dat1 <- read.table("~/Dropbox/oil_envr/methods/germination/markdown/ps_table1-paste.txt", header = T, sep = "\t")
# Massage the data to get a mean for each treatment at each time point
dat <- dat1  %>%
slice(-c(10,11)) %>%
select(-code, -notes, -TP_11, -TP_12, -TP_13, -TP_14,
-TP_15, -TP_16, -TP_17, -TP_18, -TP_19, -TP_20 ) %>%
pivot_longer(
cols = paste("TP", 01:10, sep="_"),
names_to = "time_point",
values_to = "germ_count"
) %>%
mutate(germ_perc = germ_count/ N_seeds,
sand1 = ifelse(sand == 0, "no", "yes"),
parafilm1 = ifelse(parafilm == 0, "no", "yes"),
treatment = paste(time_point, sand1, parafilm1, sep="_"),
treatment1 = paste(sand1, parafilm1, sep="_")
) %>%
group_by(treatment) %>%
mutate(germ_mean_by_trt_tp = mean(germ_perc),
se_lwr = germ_mean_by_trt_tp - std.error(germ_perc),
se_upr = germ_mean_by_trt_tp + std.error(germ_perc)
)
# Create a vector for ordering the time points
tp_order = c("TP_1", "TP_2", "TP_3", "TP_4", "TP_5", "TP_6", "TP_7", "TP_8", "TP_9", "TP_10")
tp_labels = seq(from = 12, to = 120, by = 12)
p0 <- ggplot(dat, aes(x = time_point, y = germ_mean_by_trt_tp, group = treatment1, color = treatment1)) +
geom_errorbar(aes(ymin= se_lwr, ymax= se_upr),
width=0.1, size=0.25, color = "grey50") +
geom_point() +
geom_line() +
scale_x_discrete(limits = tp_order, labels = tp_labels) +
guides(color = guide_legend(title = "Treatment")) +
scale_color_discrete(labels = c("control", "parafilm", "sand", "sand & parafilm")) +
labs(x = "Hours", y = "Germination %") +
theme_light()
p0
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(mapdata)
library(maptools)
library(usmap)
library(raster)
library(maps)
library(ggmap)
library(ggsn)
library(cowplot)
# Read in accession codes from 2003 increase
coord2003 <- read.csv("~/Dropbox/oil_envr/data/codes/increases/2003/final2003options.csv")
View(coord2003)
# Read in accession codes from 2004 increase
coord2004 <- read.csv("~/Dropbox/oil_envr/data/codes/increases/2004/final_2004_increases.csv")
View(coord2004)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(mapdata)
library(maptools)
library(usmap)
library(raster)
library(maps)
library(ggmap)
library(ggsn)
library(cowplot)
# First, let's build the map. Download and save the canada map
# that includes the province boundaries
canada <- map_data(getData(country="Canada", level="1"))
# Save the file
save(canada, file = "~/Dropbox/oil_envr/data/codes/canada.sp")
#Create the map with state lines
usa <- map_data("state")
# Reload the canada shape file if neccessary
load("~/Dropbox/oil_envr/data/codes/canada.sp")
# Create the mexico map
mexico <- map_data("worldHires", "Mexico")
NAmap <- ggplot() + geom_polygon(data = usa,
aes(x=long, y = lat, group = group),
fill = "white",
color="black") +
geom_polygon(data = canada, aes(x=long, y = lat, group = group),
fill = "white", color="black") +
geom_polygon(data = mexico, aes(x=long, y = lat, group = group),
fill = "white", color="black") +
coord_fixed(xlim = c(-128, -80),  ylim = c(25, 60), ratio = 1.2)
# Read in accession codes from 2003 increase
coord2003 <- read.csv("~/Dropbox/oil_envr/data/codes/increases/2003/final2003options.csv")
# Massage the data to only contain the accession codes we want, and then to only contain the codes we do not want.
coord2003a <- coord2003 %>%
slice(c(3,9,7,28,43,44))
coord2003a$year <- "2003"
coord2003a$color <- "blue"
coord2003b <- coord2003 %>%
slice(-c(3,9,7,28,43,44))
coord2003b$year <- "2003 alternates"
coord2003b$color <- "grey"
# Read in accession codes from 2001 increase
coord2001 <- read.csv("~/Dropbox/oil_envr/data/codes/increases/2001/final_2001_options.csv")
# Massage the data to only contain the accession codes we want, and then to only contain the codes we do not want
coord2001a <- coord2001 %>%
slice(c(39,40,67,68,71,72))
coord2001a$year <- "2001"
coord2001a$color <- "red"
coord2001b <- coord2001 %>%
slice(-c(39,40,67,68,71,72))
coord2001b$year <- "2001 alternates"
coord2001b$color <- "grey"
# Read in accession codes from 2000 increase
coord2000 <- read.csv("~/Dropbox/oil_envr/data/codes/increases/2000/final_2000_accessions.csv")
#Massage the data to only contain the accession codes we want, and then to only contain the codes we do not want.
coord2000a <- coord2000 %>%
slice(c(85,87,88,92,93))
coord2000a$year <- "2000"
coord2000a$color <- "green"
coord2000b <- coord2000 %>%
slice(-c(85,87,88,92,93))
coord2000b$year <- "2000 alternates"
coord2000b$color <- "grey"
# Read in accession codes from 2004 increase
coord2004 <- read.csv("~/Dropbox/oil_envr/data/codes/increases/2004/final_2004_increases.csv")
#Massage the data to only contain the accession codes we want, and then to only contain the codes we do not want
coord2004a <- coord2004 %>%
slice(c(1,2,10,15,12))
coord2004a$year <- "2004"
coord2004a$color <- "yellow"
coord2004b <- coord2004 %>%
slice(-c(1,2,10,15,12))
coord2004b$year <- "2004 alternates"
coord2004b$color <- "grey"
#Create data frame with all coordinates and add factor to specify year
allCoordinatesSel <- rbind(coord2003a, coord2001a, coord2000a, coord2004a)
allCoordinatesNotSel <- rbind(coord2003b, coord2001b, coord2000b, coord2004b)
# This is how you would add the year to the column if you had not already had a file with all of it sorted: allCoordinates$year <- c(rep("2000", 97), rep("2001", 77), rep("2003", 51), rep("2004", 16))
View(allCoordinatesSel)
#Now let's add a column to the coordinates selected called "lat_group" and assign each accession as H, M, or L
allCoordinatesSel$lat_group <- c("L", "L", "M", "M", "H", "H", "L", "L", "H", "H", "M", "M", "H", "M", "M", "L", "L", "L", "L", "M", "M", "H")
View(allCoordinatesSel)
# Create a map with all of the accessions we want to order, coded both by color (for year) and by shape (for lat group)
NAmap0 <- NAmap + geom_point(data = allCoordinatesSel, aes (x =lon, y =lat, fill = year, shape = lat_group), size =3)
NAmap0
View(NAmap0)
# Create a map with all of the accessions we want to order, coded both by color (for year) and by shape (for lat group)
NAmap0 <- NAmap + geom_point(data = allCoordinatesSel, aes (x =lon, y =lat, color = year, shape = lat_group), size =3)
NAmap0
View(NAmap0)
#Save the map
ggsave("7_23_updated_map.jpg",
plot = NAmap0,
device = "jpg",
width = 6,
height = 6,
units = "in",
dpi = 200
)
# Create a contingency table
table(allCoordinatesSel$year, allCoordinatesSel$lat_group)
# Create a contingency table
con_table <- table(allCoordinatesSel$year, allCoordinatesSel$lat_group)
# Create a contingency table
con_table <- data_frame(allCoordinatesSel$year, allCoordinatesSel$lat_group)
# Create a contingency table
con_table <- tibble(allCoordinatesSel$year, allCoordinatesSel$lat_group)
View(con_table)
# Create a contingency table
con_table <- table(allCoordinatesSel$year, allCoordinatesSel$lat_group)
# Create a contingency table
table(allCoordinatesSel$year, allCoordinatesSel$lat_group)
